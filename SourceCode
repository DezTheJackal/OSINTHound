#!/usr/bin/env python3
import re
import sys
import socket
import ssl
import http.client
from urllib import request, error
from datetime import datetime

CONSENT_FILE = ".osinthound_consent"

# ---------------- Consent -----------------
def require_consent():
    try:
        with open(CONSENT_FILE, "r") as f:
            if "ack" in f.read():
                return
    except FileNotFoundError:
        pass
    print("""
    [!] Legal / Ethical Notice
    OSINTHound performs OSINT lookups. Use only on assets you own or have explicit permission to test.
    By continuing, you confirm lawful use.
    Run: osinthound consent
    """)
    sys.exit(1)

def consent():
    with open(CONSENT_FILE, "w") as f:
        f.write(f"ack:{datetime.utcnow().isoformat()}\n")
    print("[+] Consent recorded. You can now use OSINTHound.")

# ---------------- Username Recon -----------------
SITES = {
    "GitHub": "https://github.com/{username}",
    "Reddit": "https://www.reddit.com/user/{username}",
    "Twitter": "https://x.com/{username}",
    "Instagram": "https://www.instagram.com/{username}/",
}

def check_username(username):
    print(f"\n[+] OSINTHound: Username reconnaissance for '{username}'")
    headers = {"User-Agent": "Mozilla/5.0"}
    for site, url in SITES.items():
        u = url.format(username=username)
        req = request.Request(u, headers=headers)
        try:
            with request.urlopen(req, timeout=8) as resp:
                if resp.status == 200:
                    print(f"  ✅ {site}: {u}")
                else:
                    print(f"  — {site}: Not found ({resp.status})")
        except error.HTTPError as e:
            if e.code == 404:
                print(f"  — {site}: Not found (404)")
            else:
                print(f"  ? {site}: HTTP {e.code}")
        except Exception as e:
            print(f"  ! {site}: error {e}")

# ---------------- Domain Intel -----------------
def domain_info(domain):
    print(f"\n[+] OSINTHound: Domain intelligence for '{domain}'")
    try:
        ip_list = socket.gethostbyname_ex(domain)[2]
        print("  A Records:", ", ".join(ip_list))
    except Exception as e:
        print("  DNS lookup failed:", e)

    # Basic HTTPS banner
    try:
        ctx = ssl.create_default_context()
        conn = http.client.HTTPSConnection(domain, 443, context=ctx, timeout=8)
        conn.request("GET", "/")
        resp = conn.getresponse()
        print("  HTTP Status:", resp.status, resp.reason)
        server = resp.getheader("Server")
        if server:
            print("  Server:", server)
        conn.close()
    except Exception as e:
        print("  HTTP banner failed:", e)

# ---------------- Email Check -----------------
EMAIL_RE = re.compile(r"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$", re.I)

def check_email(addr):
    print(f"\n[+] OSINTHound: Email check for '{addr}'")
    if EMAIL_RE.match(addr):
        print("  ✅ Syntax looks valid")
    else:
        print("  ❌ Invalid email format")

# ---------------- CLI -----------------
def main():
    if len(sys.argv) < 2:
        print("Usage: osinthound [consent|user|domain|email] <target>")
        sys.exit(1)

    cmd = sys.argv[1].lower()
    if cmd == "consent":
        consent()
    else:
        require_consent()
        if cmd == "user":
            target = sys.argv[2] if len(sys.argv) > 2 else "dezthejackal"
            check_username(target)
        elif cmd == "domain" and len(sys.argv) > 2:
            domain_info(sys.argv[2])
        elif cmd == "email" and len(sys.argv) > 2:
            check_email(sys.argv[2])
        else:
            print("Usage: osinthound [consent|user|domain|email] <target>")

if __name__ == "__main__":
    main()
